import { Request, Response, NextFunction } from 'express';\nimport { ValidationError, createApiResponse } from '../types';\nimport { logger } from '../utils/logger';\nimport Joi from 'joi';\n\n// Error handling middleware\nexport const errorHandler = (error: any, req: Request, res: Response, next: NextFunction) => {\n  // Log the error\n  console.error('Error occurred:', {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip\n  });\n\n  // Handle validation errors\n  if (error.code === 'VALIDATION_ERROR') {\n    return res.status(400).json(createApiResponse(false, null, null, error.message));\n  }\n\n  // Handle custom service errors\n  if (error.statusCode) {\n    return res.status(error.statusCode).json(createApiResponse(false, null, null, error.message));\n  }\n\n  // Handle database errors\n  if (error.code === '23505') { // Unique constraint violation\n    return res.status(409).json(createApiResponse(false, null, null, 'Resource already exists'));\n  }\n\n  if (error.code === '23503') { // Foreign key constraint violation\n    return res.status(400).json(createApiResponse(false, null, null, 'Invalid reference'));\n  }\n\n  // Default error response\n  res.status(500).json(createApiResponse(false, null, null, 'Internal server error'));\n};\n\n// Validation middleware factory\nexport const validateRequest = (schema: Joi.ObjectSchema, property: 'body' | 'query' | 'params' = 'body') => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const { error, value } = schema.validate(req[property], {\n      abortEarly: false,\n      stripUnknown: true,\n      convert: true\n    });\n\n    if (error) {\n      const validationErrors: ValidationError[] = error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message,\n        code: detail.type\n      }));\n\n      return res.status(400).json(createApiResponse(false, null, null, 'Validation failed'));\n    }\n\n    // Replace the original property with the validated value\n    req[property] = value;\n    next();\n  };\n};\n\n// Request logging middleware\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\n  const startTime = Date.now();\n  \n  res.on('finish', () => {\n    const duration = Date.now() - startTime;\n    console.log(`${req.method} ${req.url} - ${res.statusCode} - ${duration}ms`);\n  });\n  \n  next();\n};\n\n// CORS middleware\nexport const corsMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  res.header('Access-Control-Allow-Origin', process.env.FRONTEND_URL || '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n};