import Joi from 'joi';\n\n// User validation schemas\nexport const userRegistrationSchema = Joi.object({\n  email: Joi.string().email().required(),\n  password: Joi.string().min(8).pattern(new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]')).required(),\n  firstName: Joi.string().min(2).max(50).required(),\n  lastName: Joi.string().min(2).max(50).required(),\n  phone: Joi.string().pattern(/^[+]?[1-9]?[0-9]{7,15}$/).optional(),\n  role: Joi.string().valid('owner', 'manager', 'staff', 'customer').default('customer'),\n  preferredLanguage: Joi.string().valid('en', 'hi', 'kn').default('en'),\n  address: Joi.string().max(500).optional()\n});\n\nexport const userLoginSchema = Joi.object({\n  email: Joi.string().email().required(),\n  password: Joi.string().required()\n});\n\nexport const userUpdateSchema = Joi.object({\n  firstName: Joi.string().min(2).max(50).optional(),\n  lastName: Joi.string().min(2).max(50).optional(),\n  phone: Joi.string().pattern(/^[+]?[1-9]?[0-9]{7,15}$/).optional(),\n  preferredLanguage: Joi.string().valid('en', 'hi', 'kn').optional(),\n  address: Joi.string().max(500).optional()\n});\n\n// Jewelry item validation schemas\nexport const jewelryItemSchema = Joi.object({\n  name: Joi.string().min(2).max(200).required(),\n  nameHi: Joi.string().max(200).optional(),\n  nameKn: Joi.string().max(200).optional(),\n  description: Joi.string().max(1000).optional(),\n  categoryId: Joi.string().uuid().required(),\n  metalTypeId: Joi.string().uuid().required(),\n  purityId: Joi.string().uuid().required(),\n  grossWeight: Joi.number().positive().precision(3).required(),\n  netWeight: Joi.number().positive().precision(3).required(),\n  stoneWeight: Joi.number().min(0).precision(3).default(0),\n  makingCharges: Joi.number().min(0).precision(2).required(),\n  wastagePercentage: Joi.number().min(0).max(100).precision(2).default(0),\n  stoneCharges: Joi.number().min(0).precision(2).default(0),\n  otherCharges: Joi.number().min(0).precision(2).default(0),\n  costPrice: Joi.number().positive().precision(2).optional(),\n  stockQuantity: Joi.number().integer().min(0).default(1),\n  minStockLevel: Joi.number().integer().min(0).default(0),\n  size: Joi.string().max(20).optional(),\n  color: Joi.string().max(50).optional(),\n  occasion: Joi.string().max(100).optional(),\n  gender: Joi.string().valid('male', 'female', 'unisex').optional(),\n  ageGroup: Joi.string().valid('kids', 'adult', 'senior').optional(),\n  style: Joi.string().max(100).optional(),\n  tags: Joi.array().items(Joi.string().max(50)).default([]),\n  isCustomizable: Joi.boolean().default(false),\n  isFeatured: Joi.boolean().default(false),\n  location: Joi.string().max(100).optional(),\n  supplierId: Joi.string().uuid().optional(),\n  warrantyMonths: Joi.number().integer().min(0).default(12),\n  careInstructions: Joi.string().max(1000).optional()\n});\n\n// Order validation schemas\nexport const orderCreateSchema = Joi.object({\n  customerId: Joi.string().uuid().optional(),\n  orderType: Joi.string().valid('purchase', 'repair', 'customization', 'exchange').default('purchase'),\n  items: Joi.array().items(Joi.object({\n    jewelryItemId: Joi.string().uuid().required(),\n    quantity: Joi.number().integer().min(1).required(),\n    customizationDetails: Joi.object().optional(),\n    specialInstructions: Joi.string().max(500).optional(),\n    isGift: Joi.boolean().default(false),\n    giftMessage: Joi.string().max(200).optional()\n  })).min(1).required(),\n  deliveryType: Joi.string().valid('pickup', 'home_delivery', 'courier').default('pickup'),\n  deliveryAddress: Joi.string().max(500).optional(),\n  deliveryDate: Joi.date().greater('now').optional(),\n  specialInstructions: Joi.string().max(1000).optional()\n});\n\nexport const orderUpdateSchema = Joi.object({\n  status: Joi.string().valid('pending', 'confirmed', 'processing', 'ready', 'completed', 'cancelled', 'refunded').optional(),\n  priority: Joi.string().valid('low', 'normal', 'high', 'urgent').optional(),\n  deliveryDate: Joi.date().optional(),\n  specialInstructions: Joi.string().max(1000).optional(),\n  estimatedCompletion: Joi.date().optional()\n});\n\n// Payment validation schemas\nexport const paymentCreateSchema = Joi.object({\n  orderId: Joi.string().uuid().optional(),\n  repairId: Joi.string().uuid().optional(),\n  paymentMethod: Joi.string().valid('cash', 'card', 'upi', 'net_banking', 'cheque', 'gold_exchange', 'emi').required(),\n  amount: Joi.number().positive().precision(2).required(),\n  referenceNumber: Joi.string().max(100).optional()\n}).xor('orderId', 'repairId');\n\n// Category validation schemas\nexport const categorySchema = Joi.object({\n  name: Joi.string().min(2).max(100).required(),\n  nameHi: Joi.string().max(100).optional(),\n  nameKn: Joi.string().max(100).optional(),\n  description: Joi.string().max(500).optional(),\n  parentId: Joi.string().uuid().optional(),\n  makingChargePercentage: Joi.number().min(0).max(100).precision(2).default(10),\n  sortOrder: Joi.number().integer().min(0).default(0)\n});\n\n// Making charges configuration schema\nexport const makingChargesConfigSchema = Joi.object({\n  categoryId: Joi.string().uuid().optional(),\n  purityId: Joi.string().uuid().optional(),\n  chargeType: Joi.string().valid('percentage', 'per_gram', 'fixed').required(),\n  rateValue: Joi.number().positive().precision(2).required(),\n  minimumCharge: Joi.number().min(0).precision(2).default(0),\n  maximumCharge: Joi.number().positive().precision(2).optional(),\n  weightRangeMin: Joi.number().min(0).precision(3).default(0),\n  weightRangeMax: Joi.number().positive().precision(3).optional(),\n  effectiveFrom: Joi.date().default('now'),\n  effectiveTo: Joi.date().greater(Joi.ref('effectiveFrom')).optional()\n});\n\n// AI conversation schema\nexport const aiConversationSchema = Joi.object({\n  sessionId: Joi.string().required(),\n  language: Joi.string().valid('en', 'hi', 'kn').default('en'),\n  inputType: Joi.string().valid('text', 'voice').default('text'),\n  userInput: Joi.string().min(1).max(5000).required(),\n  contextData: Joi.object().optional()\n});\n\n// Search and pagination schemas\nexport const paginationSchema = Joi.object({\n  page: Joi.number().integer().min(1).default(1),\n  limit: Joi.number().integer().min(1).max(100).default(20),\n  sortBy: Joi.string().optional(),\n  sortOrder: Joi.string().valid('asc', 'desc').default('desc')\n});\n\nexport const searchSchema = Joi.object({\n  q: Joi.string().min(1).max(100).optional(),\n  category: Joi.string().uuid().optional(),\n  metalType: Joi.string().uuid().optional(),\n  purity: Joi.string().uuid().optional(),\n  minPrice: Joi.number().min(0).optional(),\n  maxPrice: Joi.number().positive().optional(),\n  minWeight: Joi.number().min(0).optional(),\n  maxWeight: Joi.number().positive().optional(),\n  gender: Joi.string().valid('male', 'female', 'unisex').optional(),\n  occasion: Joi.string().max(100).optional(),\n  isAvailable: Joi.boolean().optional(),\n  isFeatured: Joi.boolean().optional()\n}).concat(paginationSchema);\n\n// File upload schema\nexport const fileUploadSchema = Joi.object({\n  files: Joi.array().items(\n    Joi.object({\n      fieldname: Joi.string().required(),\n      originalname: Joi.string().required(),\n      mimetype: Joi.string().valid('image/jpeg', 'image/jpg', 'image/png', 'image/webp').required(),\n      size: Joi.number().max(10 * 1024 * 1024).required() // 10MB max\n    })\n  ).min(1).max(10).required(),\n  tags: Joi.array().items(Joi.string().max(50)).optional(),\n  altText: Joi.string().max(255).optional()\n});\n\n// Gold rate update schema\nexport const goldRateUpdateSchema = Joi.object({\n  metalTypeId: Joi.string().uuid().required(),\n  ratePerGram: Joi.number().positive().precision(2).required(),\n  ratePerTola: Joi.number().positive().precision(2).optional(),\n  rateSource: Joi.string().max(100).required()\n});\n\n// Repair service schema\nexport const repairServiceSchema = Joi.object({\n  customerId: Joi.string().uuid().required(),\n  itemDescription: Joi.string().min(10).max(500).required(),\n  issueDescription: Joi.string().min(10).max(1000).required(),\n  estimatedCost: Joi.number().positive().precision(2).optional(),\n  estimatedDays: Joi.number().integer().min(1).max(365).default(7)\n});\n\n// Notification schema\nexport const notificationSchema = Joi.object({\n  userId: Joi.string().uuid().required(),\n  notificationType: Joi.string().max(50).required(),\n  title: Joi.string().min(1).max(200).required(),\n  message: Joi.string().min(1).max(1000).required(),\n  channel: Joi.string().valid('email', 'sms', 'whatsapp', 'push', 'in_app').required(),\n  scheduledAt: Joi.date().optional(),\n  metadata: Joi.object().optional()\n});\n\n// Validation helper functions\nexport const validateRequest = (schema: Joi.ObjectSchema, data: any) => {\n  const { error, value } = schema.validate(data, {\n    abortEarly: false,\n    stripUnknown: true,\n    convert: true\n  });\n\n  if (error) {\n    const validationErrors = error.details.map(detail => ({\n      field: detail.path.join('.'),\n      message: detail.message,\n      code: detail.type\n    }));\n    throw {\n      code: 'VALIDATION_ERROR',\n      message: 'Validation failed',\n      statusCode: 400,\n      details: validationErrors\n    };\n  }\n\n  return value;\n};\n\nexport const validateId = (id: string, fieldName = 'id') => {\n  const schema = Joi.string().uuid().required();\n  const { error } = schema.validate(id);\n  \n  if (error) {\n    throw {\n      code: 'INVALID_ID',\n      message: `Invalid ${fieldName}`,\n      statusCode: 400\n    };\n  }\n};