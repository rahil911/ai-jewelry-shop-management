name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      service:
        description: 'Service with migrations'
        required: true
        default: 'order-management'
        type: choice
        options:
        - order-management
        - user-management
        - inventory-management
        - payment-service
      dry_run:
        description: 'Dry run (validate migrations without applying)'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    outputs:
      migration-files: ${{ steps.scan.outputs.files }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Scan for migration files
        id: scan
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          MIGRATION_DIR="services/$SERVICE/migrations"
          
          if [ -d "$MIGRATION_DIR" ]; then
            echo "Found migration directory: $MIGRATION_DIR"
            FILES=$(find "$MIGRATION_DIR" -name "*.sql" | sort)
            echo "Migration files:"
            echo "$FILES"
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No migration directory found for $SERVICE"
            echo "files=" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate SQL syntax
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          MIGRATION_DIR="services/$SERVICE/migrations"
          
          if [ -d "$MIGRATION_DIR" ]; then
            echo "Validating SQL syntax..."
            for file in "$MIGRATION_DIR"/*.sql; do
              if [ -f "$file" ]; then
                echo "Checking $file..."
                # Basic SQL syntax validation
                if ! grep -q "CREATE\|ALTER\|INSERT\|UPDATE\|DELETE" "$file"; then
                  echo "Warning: $file doesn't contain standard SQL commands"
                fi
                
                # Check for dangerous operations
                if grep -qi "DROP DATABASE\|TRUNCATE\|DELETE FROM.*WHERE" "$file"; then
                  echo "‚ö†Ô∏è Warning: $file contains potentially destructive operations"
                fi
              fi
            done
          fi

  run-migrations:
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: needs.validate-migrations.outputs.migration-files != ''
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Get database connection details
        id: db-config
        run: |
          ENV="${{ github.event.inputs.environment }}"
          
          case $ENV in
            "production")
              echo "DB_HOST=4.236.132.147" >> $GITHUB_OUTPUT
              echo "DB_NAME=jewelry_shop" >> $GITHUB_OUTPUT
              echo "DB_USER=admin" >> $GITHUB_OUTPUT
              ;;
            "development")
              echo "DB_HOST=dev-jewelry.example.com" >> $GITHUB_OUTPUT
              echo "DB_NAME=jewelry_shop_dev" >> $GITHUB_OUTPUT
              echo "DB_USER=admin" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "DB_HOST=staging-jewelry.example.com" >> $GITHUB_OUTPUT
              echo "DB_NAME=jewelry_shop_staging" >> $GITHUB_OUTPUT
              echo "DB_USER=admin" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Test database connectivity
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          psql -h ${{ steps.db-config.outputs.DB_HOST }} \
               -U ${{ steps.db-config.outputs.DB_USER }} \
               -d ${{ steps.db-config.outputs.DB_NAME }} \
               -c "SELECT version();"
               
      - name: Create migration tracking table
        if: github.event.inputs.dry_run == 'false'
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          psql -h ${{ steps.db-config.outputs.DB_HOST }} \
               -U ${{ steps.db-config.outputs.DB_USER }} \
               -d ${{ steps.db-config.outputs.DB_NAME }} \
               -c "
                 CREATE TABLE IF NOT EXISTS schema_migrations (
                   id SERIAL PRIMARY KEY,
                   service_name VARCHAR(100) NOT NULL,
                   migration_file VARCHAR(255) NOT NULL,
                   applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                   checksum VARCHAR(64),
                   UNIQUE(service_name, migration_file)
                 );
               "
               
      - name: Run migrations (dry run)
        if: github.event.inputs.dry_run == 'true'
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          MIGRATION_DIR="services/$SERVICE/migrations"
          
          echo "üîç DRY RUN MODE - Validating migrations..."
          
          for file in "$MIGRATION_DIR"/*.sql; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Would apply: $filename"
              
              # Validate SQL syntax by parsing
              psql -h ${{ steps.db-config.outputs.DB_HOST }} \
                   -U ${{ steps.db-config.outputs.DB_USER }} \
                   -d ${{ steps.db-config.outputs.DB_NAME }} \
                   --single-transaction \
                   --set ON_ERROR_STOP=on \
                   --set AUTOCOMMIT=off \
                   -f "$file" \
                   -c "ROLLBACK;"
            fi
          done
          
      - name: Apply migrations
        if: github.event.inputs.dry_run == 'false'
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          MIGRATION_DIR="services/$SERVICE/migrations"
          
          echo "üöÄ APPLYING MIGRATIONS to ${{ github.event.inputs.environment }}..."
          
          for file in "$MIGRATION_DIR"/*.sql; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              checksum=$(sha256sum "$file" | cut -d' ' -f1)
              
              # Check if migration already applied
              applied=$(psql -h ${{ steps.db-config.outputs.DB_HOST }} \
                            -U ${{ steps.db-config.outputs.DB_USER }} \
                            -d ${{ steps.db-config.outputs.DB_NAME }} \
                            -t -c "SELECT COUNT(*) FROM schema_migrations WHERE service_name='$SERVICE' AND migration_file='$filename';")
              
              if [ "$(echo $applied | tr -d ' ')" == "0" ]; then
                echo "Applying migration: $filename"
                
                # Apply migration in transaction
                psql -h ${{ steps.db-config.outputs.DB_HOST }} \
                     -U ${{ steps.db-config.outputs.DB_USER }} \
                     -d ${{ steps.db-config.outputs.DB_NAME }} \
                     --single-transaction \
                     --set ON_ERROR_STOP=on \
                     -f "$file"
                
                # Record migration
                psql -h ${{ steps.db-config.outputs.DB_HOST }} \
                     -U ${{ steps.db-config.outputs.DB_USER }} \
                     -d ${{ steps.db-config.outputs.DB_NAME }} \
                     -c "INSERT INTO schema_migrations (service_name, migration_file, checksum) VALUES ('$SERVICE', '$filename', '$checksum');"
                
                echo "‚úÖ Successfully applied: $filename"
              else
                echo "‚è≠Ô∏è Skipping already applied: $filename"
              fi
            fi
          done
          
      - name: Verify database schema
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "üìä Database schema verification..."
          
          # List all tables
          psql -h ${{ steps.db-config.outputs.DB_HOST }} \
               -U ${{ steps.db-config.outputs.DB_USER }} \
               -d ${{ steps.db-config.outputs.DB_NAME }} \
               -c "\dt"
               
          # Show migration history
          psql -h ${{ steps.db-config.outputs.DB_HOST }} \
               -U ${{ steps.db-config.outputs.DB_USER }} \
               -d ${{ steps.db-config.outputs.DB_NAME }} \
               -c "SELECT * FROM schema_migrations ORDER BY applied_at DESC LIMIT 10;" || echo "No migration history table"
               
      - name: Notify migration results
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Database migrations completed successfully!"
            echo "Environment: ${{ github.event.inputs.environment }}"
            echo "Service: ${{ github.event.inputs.service }}"
            echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          else
            echo "‚ùå Database migrations failed!"
            echo "Check logs for details."
          fi