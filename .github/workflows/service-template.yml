name: Reusable Service Build

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: 'production'
      registry:
        required: false
        type: string
        default: 'jewelryshopacr01280.azurecr.io'
    outputs:
      image-tag:
        description: "The built image tag"
        value: ${{ jobs.build-service.outputs.image-tag }}

jobs:
  build-service:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ inputs.service-name }}/package-lock.json
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            services/${{ inputs.service-name }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ inputs.service-name }}-${{ hashFiles(format('services/{0}/package-lock.json', inputs.service-name)) }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ inputs.service-name }}-
            
      - name: Install dependencies
        run: |
          cd services/${{ inputs.service-name }}
          npm ci
          
      - name: Run tests
        run: |
          cd services/${{ inputs.service-name }}
          # Run service-specific tests if they exist
          if [ -f "package.json" ] && npm run | grep -q "test"; then
            npm test
          fi
          
      - name: Build TypeScript
        run: |
          cd services/${{ inputs.service-name }}
          if [ -f "tsconfig.json" ]; then
            npm run build
          fi
          
      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
      - name: Login to Container Registry
        run: |
          REGISTRY_NAME=$(echo ${{ inputs.registry }} | cut -d'.' -f1)
          TOKEN=$(az acr login --name $REGISTRY_NAME --expose-token --output tsv --query accessToken)
          echo "$TOKEN" | docker login ${{ inputs.registry }} -u 00000000-0000-0000-0000-000000000000 --password-stdin
          
      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: services/${{ inputs.service-name }}
          file: services/${{ inputs.service-name }}/Dockerfile
          push: true
          tags: |
            ${{ inputs.registry }}/${{ inputs.service-name }}:${{ github.sha }}
            ${{ inputs.registry }}/${{ inputs.service-name }}:latest
            ${{ inputs.registry }}/${{ inputs.service-name }}:${{ inputs.environment }}
          cache-from: type=gha,scope=${{ inputs.service-name }}
          cache-to: type=gha,mode=max,scope=${{ inputs.service-name }}
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.title=${{ inputs.service-name }}
            org.opencontainers.image.description=Jewelry Shop ${{ inputs.service-name }} microservice
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            
      - name: Set output
        run: |
          echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          
      - name: Vulnerability scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ inputs.registry }}/${{ inputs.service-name }}:${{ github.sha }}
          severity-cutoff: high
          fail-build: false