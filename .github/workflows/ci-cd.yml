name: Jewelry Shop CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: jewelryshopacr01280.azurecr.io
  RESOURCE_GROUP: jewelry-shop-rg
  LOCATION: eastus
  
permissions:
  id-token: write   # Required for OIDC authentication
  contents: read
  pull-requests: write

jobs:
  #================================================
  # 1. Detect changed services for smart building
  #================================================
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
      any-service-changed: ${{ steps.check.outputs.any-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changed services
        uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: json
          filters: |
            user-management:
              - 'services/user-management/**'
              - 'shared/**'
            inventory-management:
              - 'services/inventory-management/**'
              - 'shared/**'
            pricing-service:
              - 'services/pricing-service/**'
              - 'shared/**'
            order-management:
              - 'services/order-management/**'
              - 'shared/**'
            payment-service:
              - 'services/payment-service/**'
              - 'shared/**'
            image-management:
              - 'services/image-management/**'
              - 'shared/**'
            llm-service:
              - 'services/llm-service/**'
              - 'shared/**'
            notification-service:
              - 'services/notification-service/**'
              - 'shared/**'
            analytics-service:
              - 'services/analytics-service/**'
              - 'shared/**'
              
      - name: Check if any service changed
        id: check
        run: |
          if [ "${{ steps.filter.outputs.changes }}" != "[]" ]; then
            echo "any-changed=true" >> $GITHUB_OUTPUT
          else
            echo "any-changed=false" >> $GITHUB_OUTPUT
          fi

  #================================================
  # 2. Build shared library (foundation for all services)
  #================================================
  build-shared:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-service-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install shared dependencies
        run: |
          cd shared
          npm ci
          
      - name: Build shared library
        run: |
          cd shared
          npm run build
          
      - name: Cache shared build
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-${{ github.sha }}

  #================================================
  # 3. Build and push changed microservices
  #================================================
  build-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-shared]
    if: needs.detect-changes.outputs.any-service-changed == 'true'
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.services) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Restore shared build cache
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-${{ github.sha }}
          
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            services/${{ matrix.service }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.service }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.service }}-
            
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login to Azure Container Registry
        run: |
          # Get ACR access token using OIDC
          TOKEN=$(az acr login --name $(echo ${{ env.REGISTRY }} | cut -d'.' -f1) --expose-token --output tsv --query accessToken)
          echo "$TOKEN" | docker login ${{ env.REGISTRY }} -u 00000000-0000-0000-0000-000000000000 --password-stdin
          
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ matrix.service }}:latest
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          platforms: linux/amd64
          
      - name: Update service status
        run: |
          echo "‚úÖ Successfully built and pushed ${{ matrix.service }}:${{ github.sha }}"

  #================================================
  # 4. Run integration tests
  #================================================
  integration-tests:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-push]
    if: needs.detect-changes.outputs.any-service-changed == 'true'
    strategy:
      matrix:
        test-suite:
          - api-contracts
          - service-communication
          - database-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install test dependencies
        run: |
          npm install -g newman
          # Add other test tools as needed
          
      - name: Run ${{ matrix.test-suite }} tests
        run: |
          echo "Running ${{ matrix.test-suite }} integration tests..."
          # For now, run the comprehensive test we created
          if [ -f "services/order-management/testing/comprehensive-test.sh" ]; then
            cd services/order-management
            chmod +x testing/comprehensive-test.sh
            ./testing/comprehensive-test.sh
          fi
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            test-results/
            services/*/testing/

  #================================================
  # 5. Deploy to Azure VM (production)
  #================================================
  deploy:
    runs-on: ubuntu-latest
    needs: [build-push, integration-tests]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.any-service-changed == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Update docker-compose with new image tags
        run: |
          # Update docker-compose.prod.yml with new SHA tags
          sed -i "s/:latest/:${{ github.sha }}/g" docker-compose.prod.yml
          
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.AZURE_VM_HOST }}
          username: ${{ vars.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Navigate to application directory
            cd ~/jewelry-shop
            
            # Backup current deployment
            cp docker-compose.prod.yml docker-compose.backup.yml
            
            # Pull latest images
            az acr login --name $(echo ${{ env.REGISTRY }} | cut -d'.' -f1)
            docker compose -f docker-compose.prod.yml pull
            
            # Deploy with zero-downtime
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Health check
            sleep 30
            curl -f http://localhost/health || {
              echo "Deployment failed, rolling back..."
              docker compose -f docker-compose.backup.yml up -d
              exit 1
            }
            
            echo "‚úÖ Deployment successful!"
            
      - name: Run post-deployment tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Run health checks against production
          curl -f http://${{ vars.AZURE_VM_HOST }}/health
          curl -f http://${{ vars.AZURE_VM_HOST }}:3001/health
          curl -f http://${{ vars.AZURE_VM_HOST }}:3004/health
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Successfully deployed jewelry shop services!"
          echo "Services updated: ${{ needs.detect-changes.outputs.services }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed for commit ${{ github.sha }}"
          echo "Services that were being deployed: ${{ needs.detect-changes.outputs.services }}"

  #================================================
  # 6. Cleanup old images (cost optimization)
  #================================================
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Clean up old container images
        run: |
          # Keep last 10 images per service
          REGISTRY_NAME=$(echo ${{ env.REGISTRY }} | cut -d'.' -f1)
          
          for service in user-management inventory-management pricing-service order-management payment-service image-management llm-service notification-service analytics-service; do
            echo "Cleaning up old images for $service..."
            az acr repository show-tags --name $REGISTRY_NAME --repository $service --output table --orderby time_desc --query "[10:].[name]" -o tsv | \
            while read tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ]; then
                az acr repository delete --name $REGISTRY_NAME --image $service:$tag --yes
              fi
            done
          done